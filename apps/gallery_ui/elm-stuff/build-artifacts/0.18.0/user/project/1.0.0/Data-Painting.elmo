var _user$project$Data_Painting$readyToStart = function (painting) {
	return (!_elm_lang$core$Native_Utils.eq(painting.contentPath, _elm_lang$core$Maybe$Nothing)) && (!_elm_lang$core$Native_Utils.eq(painting.stylePath, _elm_lang$core$Maybe$Nothing));
};
var _user$project$Data_Painting$setStylePath = F2(
	function (path, painting) {
		return _elm_lang$core$String$isEmpty(path) ? _elm_lang$core$Native_Utils.update(
			painting,
			{stylePath: _elm_lang$core$Maybe$Nothing}) : _elm_lang$core$Native_Utils.update(
			painting,
			{
				stylePath: _elm_lang$core$Maybe$Just(path)
			});
	});
var _user$project$Data_Painting$setContentPath = F2(
	function (path, painting) {
		return _elm_lang$core$String$isEmpty(path) ? _elm_lang$core$Native_Utils.update(
			painting,
			{contentPath: _elm_lang$core$Maybe$Nothing}) : _elm_lang$core$Native_Utils.update(
			painting,
			{
				contentPath: _elm_lang$core$Maybe$Just(path)
			});
	});
var _user$project$Data_Painting$setIterations = F2(
	function (num, _p0) {
		var _p1 = _p0;
		var newSettings = _elm_lang$core$Native_Utils.update(
			_p1.settings,
			{iterations: num});
		return _elm_lang$core$Native_Utils.update(
			_p1,
			{settings: newSettings});
	});
var _user$project$Data_Painting$setOutputWidth = F2(
	function (width, _p2) {
		var _p3 = _p2;
		var newSettings = _elm_lang$core$Native_Utils.update(
			_p3.settings,
			{outputWidth: width});
		return _elm_lang$core$Native_Utils.update(
			_p3,
			{settings: newSettings});
	});
var _user$project$Data_Painting$setVariationWeight = F2(
	function (weight, _p4) {
		var _p5 = _p4;
		var newSettings = _elm_lang$core$Native_Utils.update(
			_p5.settings,
			{variationWeight: weight});
		return _elm_lang$core$Native_Utils.update(
			_p5,
			{settings: newSettings});
	});
var _user$project$Data_Painting$setStyleWeight = F2(
	function (weight, _p6) {
		var _p7 = _p6;
		var newSettings = _elm_lang$core$Native_Utils.update(
			_p7.settings,
			{styleWeight: weight});
		return _elm_lang$core$Native_Utils.update(
			_p7,
			{settings: newSettings});
	});
var _user$project$Data_Painting$setContentWeight = F2(
	function (weight, _p8) {
		var _p9 = _p8;
		var newSettings = _elm_lang$core$Native_Utils.update(
			_p9.settings,
			{contentWeight: weight});
		return _elm_lang$core$Native_Utils.update(
			_p9,
			{settings: newSettings});
	});
var _user$project$Data_Painting$initialSettings = {iterations: 10, contentWeight: 0.1, styleWeight: 100.0, variationWeight: 1.0, outputWidth: 400};
var _user$project$Data_Painting$Painting = F6(
	function (a, b, c, d, e, f) {
		return {name: a, status: b, contentPath: c, stylePath: d, settings: e, iterations: f};
	});
var _user$project$Data_Painting$Settings = F5(
	function (a, b, c, d, e) {
		return {iterations: a, contentWeight: b, styleWeight: c, variationWeight: d, outputWidth: e};
	});
var _user$project$Data_Painting$Iteration = F2(
	function (a, b) {
		return {path: a, loss: b};
	});
var _user$project$Data_Painting$Done = {ctor: 'Done'};
var _user$project$Data_Painting$InProgress = {ctor: 'InProgress'};
var _user$project$Data_Painting$New = {ctor: 'New'};
var _user$project$Data_Painting$initialPainting = function (name) {
	return {
		name: name,
		status: _user$project$Data_Painting$New,
		contentPath: _elm_lang$core$Maybe$Nothing,
		stylePath: _elm_lang$core$Maybe$Nothing,
		settings: _user$project$Data_Painting$initialSettings,
		iterations: {ctor: '[]'}
	};
};
